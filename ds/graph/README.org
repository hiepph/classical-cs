* Graph
  There are many ways to represent a graph. But there are 2 main representations:
  + An ajdacency matrix: Each (x, y) coordinate indicates if there is an edge pointing from vertex x to y (0 or 1) or the edge's weight (for a weighed graph).
  + An adjacency list: List of vertices in which each element stores a list of connected vertices.

  =c/= implements a weighted directed graph, represented with an ajdacency list.
  The list contains a list of vertices, each vertex contains a dynamic array of edges.
  Each edge stores the destination vertex and weight.

  Undirected graph is treated as a directed graph with 2-way edges.

  It requires some additional libraries:
  + Iterative DFS (not implemented): Stack
  + BFS: FIFO Queue
  + Dijsktra's algorithm: Priority Queue

* Shortest paths
  =python/shorteset_path.py=

** Dijkstra's algorithm
   Only works with non-negative weights.

   Time: O((V + E)logV)

   Ref:
   + [[https://www.coursera.org/learn/algorithms-on-graphs/lecture/ZS5pm/dijkstras-algorithm-intuition-and-example][Coursera]]
   + [[https://www.wikiwand.com/en/Dijkstra's_algorithm#/Pseudocode][wiki]]
   + C's implementation: [[https://rosettacode.org/wiki/Dijkstra%27s_algorithm#C][Rosetta]]

** Bellman-Ford
   Can work with negative weights, as long as the graph contains no negative weight cycles.
   The presence of negative weight cycles means no existence of shortest paths between any two vertices.

   Slower than Dijkstra. O(VE)

   Can be used for checking for the existence of negative weight cycles.
   After (V-1) iterations of the Bellman Ford's algorithm, we check at the V-th iteration if there is any change.

   Ref:
   + [[https://www.wikiwand.com/en/Bellman%E2%80%93Ford_algorithm][wiki]]
   + [[https://cp-algorithms.com/graph/bellman_ford.html][cp-algorithms]]

* Topological sort
  ~python/toposort.py~

  1. DFS
  2. Sort vertices by reversed post-order

* Minimum spanning Tree (MST)
  1. Prim algorithm (~python/mst_prim.py~)
     Based on Dijkstra.

     Utilizes priority tree, grow by one edge each iteration.

     Refer: [[https://www.coursera.org/learn/algorithms-on-graphs][Algorithms on Graph]]: Prim algorithm.

  2. Kruskal algorithm (~python/mst_kruskal.py~)
     Repeatedly add lightest edge that doesn't produce a cycle.

     Adapts union's quick find to check for connectivity.

     Refer: [[https://www.coursera.org/learn/algorithms-on-graphs][Algorithms on Graph]]: Kruskal algorithm.

* Strongly connected components
  =python/strongly_connected_components.py=

  Reverse the graph and then topological sort to find the sinks (which are the sources of the original graph).
  For each source in the original graph, explore (DFS) to group connected vertices.

  Refer: [[https://www.coursera.org/learn/algorithms-on-graphs][Algorithms on Graph]]: Strongly connected components.

* Is graph bipartite?
  =python/is_bipartite.py=

  A bipartite graph is graph whose vertices can be divided into two disjoint sets.

  [[https://upload.wikimedia.org/wikipedia/commons/thumb/e/e8/Simple-bipartite-graph.svg/440px-Simple-bipartite-graph.svg.png]]

  Idea: Use BFS to color Red and Blue for adjacent vertices. If 2 adjacent vertices have the same color then the graph is not bipartite.

* Check if graph contains cycles
  =python/has_cycle.py=

  + DFS: check for the existence of back edges (edge that points from a vertice to its ancestor)
  + BFS: check for the existence of cross edges

  Refer: [[https://www.wikiwand.com/en/Cycle_(graph_theory)][wiki]]
