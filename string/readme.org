* Find substring
** Knuth-Morris-Pratt (KMP)
1. Implementation 1: refer [[https://www.youtube.com/watch?v=BXCEFAzhxGY][Back to back SWE]]
   The traditional algorithm.

2. Implementation 2: refer [[https://www.coursera.org/learn/algorithms-on-strings/home/week/3][Coursera]]
   Modified KMP. A more clever implementation.

Time: O(n + m), where n is the length of text \amp m is the length of pattern.

** Rabin-Karp algorithm (or rolling hash algorithm)
Time: n is the length of text \amp m is the length of pattern.
+ Average and best: O(n + m)
+ Worst: O(nm)

Pros: Easier to implement.

Cons: Assume that a collision will never happen. This can be prevent by using various hash techniques.

*** Reference
[[https://www.wikiwand.com/en/Rabin%E2%80%93Karp_algorithm][wiki]]

[[https://www.sci.unich.it/~acciaro/Rabin_Karp.pdf][pseudo code]]: [[https://www.programiz.com/dsa/rabin-karp-algorithm][programiz]]

* Suffix Tree
https://www.cs.jhu.edu/~langmea/resources/lecture_notes/suffix_trees.pdf

* Trie
Suitable for autocomplete features and multiple patterns matching.
